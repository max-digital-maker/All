// =========================================================================================
// –§–ê–ô–õ: SheetsOperations.gs (–í–µ—Ä—Å–∏—è 7.0 "–§–ò–ù–ê–õ–¨–ù–´–ô –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ö–û–î")
// –ü–æ–ª–Ω–∞—è –∑–∞–º–µ–Ω–∞. –£—á—Ç–µ–Ω—ã –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ö–∞–ª–µ–Ω–¥–∞—Ä—è, –ó–∞–º–µ—Ç–æ–∫ –∏ –ó–∞–¥–∞—á.
// =========================================================================================

// ===============================================================
// –ë–õ–û–ö: –ö–ê–õ–ï–ù–î–ê–†–¨
// ===============================================================

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å.
 */
function addEventToSheet(eventData, userId, chatId) {
  try {
    const sheet = getSheet('01_–ö–∞–ª–µ–Ω–¥–∞—Ä—å_–°–æ–±—ã—Ç–∏—è');
    const now = new Date();

    let eventDate = eventData.date;
    if (!eventDate || !String(eventDate).match(/^\d{2}\.\d{2}\.\d{4}$/)) {
        const parsedDates = parseDateScope(eventData.date_scope || '—Å–µ–≥–æ–¥–Ω—è', now);
        eventDate = parsedDates.startDate ? formatDateForSheet(parsedDates.startDate) : formatDateForSheet(now);
    }

    let eventTime = eventData.time || '09:00';
    let eventEndTime = eventData.end_time;

    if (!eventEndTime && eventData.duration) {
        const durationMinutes = parseDuration(eventData.duration);
        if (durationMinutes > 0) {
            const tempDate = parseDdMmYyyyToDate(eventDate); 
            if (tempDate) {
                const [hour, minute] = eventTime.split(':').map(Number);
                tempDate.setHours(hour, minute, 0, 0); 
                tempDate.setMinutes(tempDate.getMinutes() + durationMinutes); 
                eventEndTime = formatTimeForSheet(tempDate);
            }
        }
    }

    const newRow = [
      Utilities.getUuid(),
      eventData.event_name || '–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ',
      eventDate,
      eventTime,
      eventEndTime || '',
      eventData.description || '',
      eventData.location || '',
      (eventData.participants || []).join(', '),
      '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ',
      false, // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
      now.toLocaleString('ru-RU'),
      userId,
      chatId,
      false // –£–¥–∞–ª–µ–Ω–æ
    ];
    sheet.appendRow(newRow);
    sendMessageToTelegram(chatId, `–°–æ–±—ã—Ç–∏–µ <b>"${eventData.event_name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}"</b> –∑–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ ${eventDate} —Å ${eventTime}!`);

  } catch (e) {
    directLogToSheet('Error in addEventToSheet: ' + e.toString() + e.stack);
    sendMessageToTelegram(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.');
  }
}

/**
 * –ò—â–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.
 */
function handleCalendarQuery(filters, userId, chatId) {
  try {
    const sheet = getSheet('01_–ö–∞–ª–µ–Ω–¥–∞—Ä—å_–°–æ–±—ã—Ç–∏—è');
    const data = sheet.getDataRange().getValues();
    const header = data[0]; 
    
    const NAME_COL = header.indexOf('–ù–∞–∑–≤–∞–Ω–∏–µ –°–æ–±—ã—Ç–∏—è');
    const DATE_COL = header.indexOf('–î–∞—Ç–∞');
    const TIME_COL = header.indexOf('–í—Ä–µ–º—è');
    const END_TIME_COL = header.indexOf('–í—Ä–µ–º—è_–û–∫–æ–Ω—á–∞–Ω–∏—è'); 
    const DESC_COL = header.indexOf('–û–ø–∏—Å–∞–Ω–∏–µ');
    const LOCATION_COL = header.indexOf('–ú–µ—Å—Ç–æ');
    const PARTICIPANTS_COL = header.indexOf('–£—á–∞—Å—Ç–Ω–∏–∫–∏');
    const USER_ID_COL = header.indexOf('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_ID');
    const DELETED_COL = header.indexOf('–£–¥–∞–ª–µ–Ω–æ');

    const filteredEvents = [];
    let { startDate, endDate } = parseDateScope(filters.date_scope, new Date());

    for (let i = 1; i < data.length; i++) {
      const row = data[i];
      if (row[DELETED_COL] === true || String(row[USER_ID_COL]) !== String(userId)) continue;
      
      let matches = true; 
      
      const eventDateObj = parseDateCellContent(row[DATE_COL]);
      if (eventDateObj && startDate && endDate) {
        if (eventDateObj < startDate || eventDateObj > endDate) matches = false;
      }
      
      if (matches && filters.participants && filters.participants.length > 0) {
        const eventParticipants = String(row[PARTICIPANTS_COL] || '').toLowerCase();
        const requestedParticipants = filters.participants.map(p => String(p).toLowerCase());
        if (!requestedParticipants.every(reqP => eventParticipants.includes(reqP))) matches = false;
      }

      if (matches && (filters.keywords || filters.event_name)) {
        const keyword = String(filters.keywords || filters.event_name).toLowerCase();
        if (!String(row[NAME_COL] || '').toLowerCase().includes(keyword)) matches = false;
      }

      if (matches) filteredEvents.push(row);
    }

    let responseText = '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É —Å–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.';
    if (filteredEvents.length > 0) {
      responseText = '–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª:\n\n';
      filteredEvents.sort((a, b) => (parseDateCellContent(a[DATE_COL]) || 0) - (parseDateCellContent(b[DATE_COL]) || 0));
      filteredEvents.forEach(event => {
        responseText += `üóìÔ∏è <b>${event[NAME_COL]}</b>\n`;
        responseText += `  –î–∞—Ç–∞: ${formatDateForSheet(parseDateCellContent(event[DATE_COL]))} —Å ${formatTimeForSheet(event[TIME_COL])}\n`;
        if (event[LOCATION_COL]) responseText += `  üìç –ú–µ—Å—Ç–æ: ${event[LOCATION_COL]}\n`;
        if (event[PARTICIPANTS_COL]) responseText += `  –£—á–∞—Å—Ç–Ω–∏–∫–∏: ${event[PARTICIPANTS_COL]}\n`;
        if (event[DESC_COL]) responseText += `  –û–ø–∏—Å–∞–Ω–∏–µ: ${event[DESC_COL]}\n`;
        responseText += `---\n`;
      });
    }
    sendMessageToTelegram(chatId, responseText);
  } catch (e) {
    directLogToSheet('Error in handleCalendarQuery: ' + e.toString() + e.stack);
    sendMessageToTelegram(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏–π.');
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ.
 */
function updateEventInSheet(eventData, userId, chatId) {
  try {
    const sheet = getSheet('01_–ö–∞–ª–µ–Ω–¥–∞—Ä—å_–°–æ–±—ã—Ç–∏—è');
    const data = sheet.getDataRange().getValues();
    const header = data[0]; 
    const NAME_COL = header.indexOf('–ù–∞–∑–≤–∞–Ω–∏–µ –°–æ–±—ã—Ç–∏—è');
    const DATE_COL = header.indexOf('–î–∞—Ç–∞');
    const TIME_COL = header.indexOf('–í—Ä–µ–º—è');
    const LOCATION_COL = header.indexOf('–ú–µ—Å—Ç–æ');
    const PARTICIPANTS_COL = header.indexOf('–£—á–∞—Å—Ç–Ω–∏–∫–∏');
    const DESC_COL = header.indexOf('–û–ø–∏—Å–∞–Ω–∏–µ');
    const STATUS_COL = header.indexOf('–°—Ç–∞—Ç—É—Å');
    const USER_ID_COL = header.indexOf('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_ID');
    const DELETED_COL = header.indexOf('–£–¥–∞–ª–µ–Ω–æ');

    if (!eventData.date || !eventData.time) {
      sendMessageToTelegram(chatId, "–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –º–Ω–µ –Ω—É–∂–Ω–∞ —Ç–æ—á–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è.");
      return;
    }

    let foundRowIndex = -1; 
    for (let i = 1; i < data.length; i++) { 
      const row = data[i];
      if (row[DELETED_COL] === true || String(row[USER_ID_COL]) !== String(userId)) continue;
      
      const eventDateInSheet = formatDateForSheet(parseDateCellContent(row[DATE_COL]));
      const eventTimeInSheet = formatTimeForSheet(row[TIME_COL]);
      
      let nameMatch = true;
      if (eventData.event_name) {
        nameMatch = String(row[NAME_COL] || '').toLowerCase().includes(String(eventData.event_name).toLowerCase());
      }
      
      if (eventDateInSheet === eventData.date && eventTimeInSheet === eventData.time && nameMatch) {
        foundRowIndex = i; 
        break; 
      }
    }

    if (foundRowIndex === -1) {
      sendMessageToTelegram(chatId, `–°–æ–±—ã—Ç–∏–µ "${eventData.event_name || ''}" –Ω–∞ ${eventData.date} –≤ ${eventData.time} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);
      return;
    }

    const fieldToUpdate = (eventData.field_to_update || '').toLowerCase();
    let colIndexToUpdate = -1;
    switch (fieldToUpdate) {
      case 'description': colIndexToUpdate = DESC_COL; break;
      case 'participants': colIndexToUpdate = PARTICIPANTS_COL; break;
      case 'location': colIndexToUpdate = LOCATION_COL; break;
      case 'time': colIndexToUpdate = TIME_COL; break;
      case 'date': colIndexToUpdate = DATE_COL; break;
      case 'status': colIndexToUpdate = STATUS_COL; break;
      default: sendMessageToTelegram(chatId, `–ù–µ –º–æ–≥—É –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ "${fieldToUpdate}".`); return;
    }

    if (colIndexToUpdate !== -1) {
      sheet.getRange(foundRowIndex + 1, colIndexToUpdate + 1).setValue(eventData.new_value);
      sendMessageToTelegram(chatId, `–°–æ–±—ã—Ç–∏–µ "${data[foundRowIndex][NAME_COL]}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.`);
    }
  } catch (e) {
    directLogToSheet('Error in updateEventInSheet: ' + e.toString() + e.stack);
    sendMessageToTelegram(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.');
  }
}

/**
 * "–ú—è–≥–∫–æ" —É–¥–∞–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ.
 */
function deleteEventFromSheet(eventData, userId, chatId) {
    try {
    const sheet = getSheet('01_–ö–∞–ª–µ–Ω–¥–∞—Ä—å_–°–æ–±—ã—Ç–∏—è');
    const data = sheet.getDataRange().getValues();
    const header = data[0]; 

    const NAME_COL = header.indexOf('–ù–∞–∑–≤–∞–Ω–∏–µ –°–æ–±—ã—Ç–∏—è');
    const DATE_COL = header.indexOf('–î–∞—Ç–∞');
    const TIME_COL = header.indexOf('–í—Ä–µ–º—è');
    const USER_ID_COL = header.indexOf('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_ID');
    const DELETED_COL = header.indexOf('–£–¥–∞–ª–µ–Ω–æ');

    if (!eventData.date || !eventData.time) { 
      sendMessageToTelegram(chatId, "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –µ–≥–æ —Ç–æ—á–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.");
      return;
    }

    let foundRowIndex = -1; 
    for (let i = 1; i < data.length; i++) { 
      const row = data[i];
      if (row[DELETED_COL] === true || String(row[USER_ID_COL]) !== String(userId)) continue; 
      
      const eventNameInSheet = String(row[NAME_COL] || '').toLowerCase();
      const eventDateInSheet = formatDateForSheet(parseDateCellContent(row[DATE_COL]));
      const eventTimeInSheet = formatTimeForSheet(row[TIME_COL]);
      
      let nameMatch = true;
      if (eventData.event_name) {
        nameMatch = eventNameInSheet.includes(String(eventData.event_name).toLowerCase());
      }
      
      if (nameMatch && eventDateInSheet === eventData.date && eventTimeInSheet === eventData.time) {
        foundRowIndex = i; 
        break; 
      }
    }

    if (foundRowIndex === -1) {
      sendMessageToTelegram(chatId, `–°–æ–±—ã—Ç–∏–µ –Ω–∞ ${eventData.date} –≤ ${eventData.time} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);
      return;
    }

    sheet.getRange(foundRowIndex + 1, DELETED_COL + 1).setValue(true);
    sendMessageToTelegram(chatId, `–°–æ–±—ã—Ç–∏–µ <b>"${data[foundRowIndex][NAME_COL]}"</b> –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É.`);
    
  } catch (e) {
    directLogToSheet('Error soft-deleting event: ' + e.toString());
    sendMessageToTelegram(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.');
  }
}

// ===============================================================
// –ë–õ–û–ö: –ó–ê–ú–ï–¢–ö–ò
// ===============================================================

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É.
 */
function addNoteToSheet(noteData, userId, chatId) {
  try {
    const sheet = getSheet('02_–õ–∏—á–Ω—ã–µ_–ó–∞–º–µ—Ç–∫–∏');
    const now = new Date();
    const newRow = [ Utilities.getUuid(), formatDateForSheet(now), formatTimeForSheet(now), noteData.content || '–ü—É—Å—Ç–∞—è –∑–∞–º–µ—Ç–∫–∞', noteData.category || '–û–±—â–µ–µ', userId, chatId, false ];
    sheet.appendRow(newRow);
    sendMessageToTelegram(chatId, `–ó–∞–º–µ—Ç–∫–∞ <b>"${(noteData.content || '').substring(0, 50)}..."</b> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!`);
  } catch (e) {
    directLogToSheet('Error adding note: ' + e.toString());
    sendMessageToTelegram(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏.');
  }
}

/**
 * "–ú—è–≥–∫–æ" —É–¥–∞–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É.
 */
function deleteNoteFromSheet(noteData, userId, chatId) {
  try {
    const sheet = getSheet('02_–õ–∏—á–Ω—ã–µ_–ó–∞–º–µ—Ç–∫–∏');
    const data = sheet.getDataRange().getValues();
    const header = data[0];
    const CONTENT_COL = header.indexOf('–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ó–∞–º–µ—Ç–∫–∏');
    const USER_ID_COL = header.indexOf('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_ID');
    const DELETED_COL = header.indexOf('–£–¥–∞–ª–µ–Ω–æ');

    const keywords = (noteData.keywords || '').toLowerCase();
    if (!keywords) {
      sendMessageToTelegram(chatId, "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É, —É–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –µ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è.");
      return;
    }
    
    const foundNotes = [];
    for (let i = 1; i < data.length; i++) {
        const row = data[i];
        if (row[DELETED_COL] === true || String(row[USER_ID_COL]) !== String(userId)) continue;
        if (String(row[CONTENT_COL] || '').toLowerCase().includes(keywords)) {
            foundNotes.push({ rowIndex: i + 1, content: row[CONTENT_COL] });
        }
    }

    if (foundNotes.length === 0) {
        sendMessageToTelegram(chatId, `–ó–∞–º–µ—Ç–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–µ–π "${noteData.keywords}", –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);
    } else if (foundNotes.length === 1) {
        const noteToDelete = foundNotes[0];
        sheet.getRange(noteToDelete.rowIndex, DELETED_COL + 1).setValue(true);
        sendMessageToTelegram(chatId, `–ó–∞–º–µ—Ç–∫–∞ "<i>${noteToDelete.content.substring(0, 50)}...</i>" –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É.`);
    } else {
        let responseText = `–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–º–µ—Ç–æ–∫. –ö–∞–∫—É—é —É–¥–∞–ª–∏—Ç—å?\n\n`;
        foundNotes.slice(0, 5).forEach((note, index) => { responseText += `${index + 1}. ${note.content.substring(0, 60)}...\n`; });
        responseText += `\n–û—Ç–≤–µ—Ç—å—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: "—É–¥–∞–ª–∏ –ø–µ—Ä–≤—É—é" –∏–ª–∏ "–æ—Ç–º–µ–Ω–∞".`;
        sendMessageToTelegram(chatId, responseText);
    }
  } catch (e) {
    directLogToSheet('Error soft-deleting note: ' + e.toString());
    sendMessageToTelegram(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏.');
  }
}

// ===============================================================
// –ë–õ–û–ö: –ó–ê–î–ê–ß–ò
// ===============================================================

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É.
 */
function addTaskToSheet(taskData, userId, chatId) {
  try {
    const sheet = getSheet('03_–ó–∞–¥–∞—á–∏');
    const now = new Date();
    let dueDate = '';
    if (taskData.due_date_scope) {
        const parsedDates = parseDateScope(taskData.due_date_scope, now);
        if(parsedDates.startDate) dueDate = formatDateForSheet(parsedDates.startDate);
    }
    const newRow = [
      Utilities.getUuid(),
      taskData.task_name || '–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞',
      taskData.project || '',
      (taskData.tags || []).join(', '),
      '–ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é',
      taskData.priority || '–°—Ä–µ–¥–Ω–∏–π',
      dueDate,
      taskData.assignee || userId,
      now.toLocaleString('ru-RU'),
      '', 
      userId,
      chatId,
      false
    ];
    sheet.appendRow(newRow);
    sendMessageToTelegram(chatId, `‚úÖ –ó–∞–¥–∞—á–∞ "<b>${taskData.task_name}</b>" –¥–æ–±–∞–≤–ª–µ–Ω–∞!`);
  } catch (e) {
    directLogToSheet('Error in addTaskToSheet: ' + e.toString() + e.stack);
    sendMessageToTelegram(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.');
  }
}

/**
 * –ò—â–µ—Ç –∑–∞–¥–∞—á–∏.
 */
function handleTasksQuery(filters, userId, chatId) {
  try {
    const sheet = getSheet('03_–ó–∞–¥–∞—á–∏');
    const data = sheet.getDataRange().getValues();
    const header = data[0];
    const NAME_COL = header.indexOf('–ù–∞–∑–≤–∞–Ω–∏–µ –ó–∞–¥–∞—á–∏');
    const PROJECT_COL = header.indexOf('–ü—Ä–æ–µ–∫—Ç');
    const TAGS_COL = header.indexOf('–¢–µ–≥–∏');
    const STATUS_COL = header.indexOf('–°—Ç–∞—Ç—É—Å');
    const PRIORITY_COL = header.indexOf('–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç');
    const DUE_DATE_COL = header.indexOf('–°—Ä–æ–∫');
    const ASSIGNEE_COL = header.indexOf('–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π');
    const DELETED_COL = header.indexOf('–£–¥–∞–ª–µ–Ω–æ');

    const filteredTasks = [];
    for (let i = 1; i < data.length; i++) {
        const row = data[i];
        if (row[DELETED_COL] === true) continue;

        let matches = true;
        if (filters.project && String(row[PROJECT_COL] || '').toLowerCase() !== filters.project.toLowerCase()) matches = false;
        if (filters.status && String(row[STATUS_COL] || '').toLowerCase() !== filters.status.toLowerCase()) matches = false;
        if (filters.priority && String(row[PRIORITY_COL] || '').toLowerCase() !== filters.priority.toLowerCase()) matches = false;
        if (filters.assignee && !String(row[ASSIGNEE_COL] || '').toLowerCase().includes(filters.assignee.toLowerCase())) matches = false;
        if (filters.tags && filters.tags.length > 0) {
            const rowTags = String(row[TAGS_COL] || '').toLowerCase().split(',').map(t => t.trim());
            if (!filters.tags.every(reqTag => rowTags.includes(reqTag.toLowerCase()))) matches = false;
        }
        
        if (matches) filteredTasks.push(row);
    }
    
    let responseText = '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.';
    if (filteredTasks.length > 0) {
        responseText = '–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª:\n\n';
        filteredTasks.sort((a, b) => (parseDateCellContent(a[DUE_DATE_COL]) || new Date('2100-01-01')) - (parseDateCellContent(b[DUE_DATE_COL]) || new Date('2100-01-01')));
        filteredTasks.forEach(task => {
            responseText += `üìù <b>${task[NAME_COL]}</b> [${task[STATUS_COL]}]\n`;
            if(task[DUE_DATE_COL]) responseText += `   –°—Ä–æ–∫: ${formatDateForSheet(parseDateCellContent(task[DUE_DATE_COL]))}\n`;
            if(task[PROJECT_COL]) responseText += `   –ü—Ä–æ–µ–∫—Ç: ${task[PROJECT_COL]}\n`;
            if(task[ASSIGNEE_COL]) responseText += `   –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: ${task[ASSIGNEE_COL]}\n`;
            if(task[TAGS_COL]) responseText += `   –¢–µ–≥–∏: #${String(task[TAGS_COL]).replace(/, /g, ' #').replace(/,/g, ' #')}\n`;
            if(task[PRIORITY_COL]) responseText += `   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${task[PRIORITY_COL]}\n`;
            responseText += `---\n`;
        });
    }
    sendMessageToTelegram(chatId, responseText);
  } catch (e) {
      directLogToSheet('Error in handleTasksQuery: ' + e.toString() + e.stack);
      sendMessageToTelegram(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–¥–∞—á.');
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏.
 */
function updateTaskStatusInSheet(taskData, userId, chatId) {
    try {
        const sheet = getSheet('03_–ó–∞–¥–∞—á–∏');
        const data = sheet.getDataRange().getValues();
        const header = data[0];
        const NAME_COL = header.indexOf('–ù–∞–∑–≤–∞–Ω–∏–µ –ó–∞–¥–∞—á–∏');
        const STATUS_COL = header.indexOf('–°—Ç–∞—Ç—É—Å');
        const DATE_COMPLETED_COL = header.indexOf('–î–∞—Ç–∞_–ó–∞–≤–µ—Ä—à–µ–Ω–∏—è');
        const DELETED_COL = header.indexOf('–£–¥–∞–ª–µ–Ω–æ');

        const keywords = (taskData.keywords || '').toLowerCase();
        if (!keywords) {
            sendMessageToTelegram(chatId, "–ß—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É, —É–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –µ–µ –Ω–∞–∑–≤–∞–Ω–∏—è.");
            return;
        }

        const foundTasks = [];
        for (let i = 1; i < data.length; i++) {
            const row = data[i];
            if (row[DELETED_COL] === true) continue;
            if (String(row[NAME_COL] || '').toLowerCase().includes(keywords)) {
                foundTasks.push({ rowIndex: i + 1, name: row[NAME_COL] });
            }
        }

        if (foundTasks.length === 0) {
            sendMessageToTelegram(chatId, `–ó–∞–¥–∞—á–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è "${keywords}", –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
        } else if (foundTasks.length === 1) {
            const taskToUpdate = foundTasks[0];
            const newStatus = taskData.new_status || '–í—ã–ø–æ–ª–Ω–µ–Ω–æ';
            sheet.getRange(taskToUpdate.rowIndex, STATUS_COL + 1).setValue(newStatus);
            if (newStatus === '–í—ã–ø–æ–ª–Ω–µ–Ω–æ' || newStatus === '–û—Ç–º–µ–Ω–µ–Ω–æ') {
                sheet.getRange(taskToUpdate.rowIndex, DATE_COMPLETED_COL + 1).setValue(new Date());
            }
            sendMessageToTelegram(chatId, `üëç –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ "<b>${taskToUpdate.name}</b>" –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${newStatus}"!`);
        } else {
            sendMessageToTelegram(chatId, "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫—É—é –∏–º–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å.");
        }
    } catch (e) {
        directLogToSheet('Error in updateTaskStatusInSheet: ' + e.toString() + e.stack);
        sendMessageToTelegram(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏.');
    }
}


/**
 * "–ú—è–≥–∫–æ" —É–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É.
 */
function deleteTaskFromSheet(taskData, userId, chatId) {
    try {
        const sheet = getSheet('03_–ó–∞–¥–∞—á–∏');
        const data = sheet.getDataRange().getValues();
        const header = data[0];
        const NAME_COL = header.indexOf('–ù–∞–∑–≤–∞–Ω–∏–µ –ó–∞–¥–∞—á–∏');
        const DELETED_COL = header.indexOf('–£–¥–∞–ª–µ–Ω–æ');

        const keywords = (taskData.keywords || '').toLowerCase();
        if (!keywords) {
            sendMessageToTelegram(chatId, "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É, —É–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –µ–µ –Ω–∞–∑–≤–∞–Ω–∏—è.");
            return;
        }
        
        const foundTasks = [];
        for (let i = 1; i < data.length; i++) {
            const row = data[i];
            if (row[DELETED_COL] === true) continue;
            if (String(row[NAME_COL] || '').toLowerCase().includes(keywords)) {
                foundTasks.push({ rowIndex: i + 1, name: row[NAME_COL] });
            }
        }

        if (foundTasks.length === 0) {
            sendMessageToTelegram(chatId, `–ó–∞–¥–∞—á–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è "${keywords}", –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
        } else if (foundTasks.length === 1) {
            const taskToDelete = foundTasks[0];
            sheet.getRange(taskToDelete.rowIndex, DELETED_COL + 1).setValue(true);
            sendMessageToTelegram(chatId, `üóëÔ∏è –ó–∞–¥–∞—á–∞ "<b>${taskToDelete.name}</b>" –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É.`);
        } else {
            sendMessageToTelegram(chatId, "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫—É—é –∏–º–µ–Ω–Ω–æ —É–¥–∞–ª–∏—Ç—å.");
        }
    } catch (e) {
        directLogToSheet('Error in deleteTaskFromSheet: ' + e.toString() + e.stack);
        sendMessageToTelegram(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.');
    }
}